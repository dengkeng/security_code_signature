# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../code_signature.gni")

ohos_unittest("code_sign_ioctl_unittest") {
  module_out_path = "security/code_signature"
  sources = [ "code_sign_ioctl_test.cpp" ]

  deps = [ "${googletest_dir}:gtest" ]
}

ohos_unittest("code_sign_utils_unittest") {
  module_out_path = "security/code_signature"
  resource_config_file = "resources/ohos_test.xml"
  sources = [ "code_sign_utils_test.cpp" ]

  deps = [
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils:libcode_sign_utils",
    "${googletest_dir}:gtest",
  ]

  include_dirs = [
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils/include",
  ]

  external_deps = [ "hilog:libhilog" ]
}

ohos_unittest("local_code_sign_unittest") {
  module_out_path = "security/code_signature"
  resource_config_file = "resources/ohos_test.xml"
  sources = [ "local_code_sign_test.cpp" ]
  deps = [
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils:libcode_sign_utils",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign:liblocal_code_sign_sdk",
    "${googletest_dir}:gtest",
    "${openssl_dir}:libcrypto_shared",
  ]

  include_dirs = [
    "utils/include",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign/include",
    "${code_signature_root_dir}/services/local_code_sign/include",
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils/include",
  ]
  configs = [ "${code_signature_root_dir}:common_utils_config" ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("sign_and_enforce_unittest") {
  module_out_path = "security/code_signature"
  resource_config_file = "resources/ohos_test.xml"
  sources = [ "sign_and_enforce_test.cpp" ]
  deps = [
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils:libcode_sign_utils",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign:liblocal_code_sign_sdk",
    "${googletest_dir}:gtest",
    "${openssl_dir}:libcrypto_shared",
  ]

  include_dirs = [
    "utils/include",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign/include",
    "${code_signature_root_dir}/services/local_code_sign/include",
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils/include",
  ]
  configs = [ "${code_signature_root_dir}:common_utils_config" ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("multi_thread_local_sign_unittest") {
  module_out_path = "security/code_signature"
  resource_config_file = "resources/ohos_test.xml"
  sources = [ "multi_thread_local_sign_test.cpp" ]
  deps = [
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils:libcode_sign_utils",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign:liblocal_code_sign_sdk",
    "${googletest_dir}:gtest",
    "${openssl_dir}:libcrypto_shared",
  ]

  include_dirs = [
    "utils/include",
    "${code_signature_root_dir}/interfaces/innerkits/local_code_sign/include",
    "${code_signature_root_dir}/services/local_code_sign/include",
    "${code_signature_root_dir}/interfaces/innerkits/code_sign_utils/include",
  ]
  configs = [ "${code_signature_root_dir}:common_utils_config" ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("unittest_group") {
  testonly = true
  if (!defined(ohos_lite)) {
    deps = [
      ":code_sign_ioctl_unittest",
      ":code_sign_utils_unittest",
      ":local_code_sign_unittest",
      ":multi_thread_local_sign_unittest",
      ":sign_and_enforce_unittest",
    ]
  }
}
